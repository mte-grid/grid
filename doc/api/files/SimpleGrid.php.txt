<?php
/**
 * @company MTE Telecom, Ltd.
 * @author Roman Malashin <malashinr@mte-telecom.ru>
 */

namespace Nnx\DataGrid;

use Nnx\DataGrid\Column\ColumnInterface;
use Nnx\DataGrid\Mutator\MutatorInterface;
use Traversable;
use ArrayAccess;

/**
 * Class SimpleGrid
 * @package Nnx\DataGrid
 */
class SimpleGrid extends AbstractGrid
{
    /**
     * Данные в гриде
     * @var array
     */
    protected $rowSet = [];

    /**
     * Возвращает массив строк таблицы
     * @return array
     */
    public function getRowSet()
    {
        if (count($this->rowSet) === 0) {
            $data = $this->getAdapter()->getData();
            $this->buildRowSet($data);
        }

        return $this->rowSet;
    }

    /**
     * Создает из данных адаптера rowSet
     * @param array | ArrayAccess $data
     * @return $this
     * @throws Exception\RuntimeException
     */
    protected function buildRowSet($data)
    {
        if (!is_array($data) && $data instanceof Traversable) {
            throw new Exception\RuntimeException(
                sprintf('Данные должны быть массивом или %s', ArrayAccess::class)
            );
        }
        $columns = $this->getColumns();

        foreach ($data as $item) {
            $mutators = $this->getMutators();
            $item = $this->mutate($mutators, $item);
            /** @var ColumnInterface $column */
            foreach ($columns as $column) {
                $columnName = $column->getName();
                $mutators = $column->getMutators();
                if (array_key_exists($columnName, $item)) {
                    $item = $this->mutate($mutators, $item, $columnName);
                }
            }
            $this->rowSet[] = new Row($item);
        }
        return $this;
    }

    /**
     * Метод непосредственно осуществляет мутацию данных
     * @param array $mutators
     * @param array | Row $row
     * @param string $name
     * @return mixed
     */
    protected function mutate(array $mutators, $row, $name = null)
    {
        /** @var MutatorInterface $mutator */
        foreach ($mutators as $mutator) {
            if ($mutator instanceof MutatorInterface) {
                $mutator->setRowData($row);
                if ($mutator->validate()) {
                    if ($name) {
                        $row[$name] = $mutator->change($row[$name]);
                    } else {
                        $row = $mutator->change($row);
                    }
                }
            }
        }
        return $row;
    }

    /**
     * @param array $rowSet
     * @return $this
     */
    public function setRowSet($rowSet)
    {
        $this->rowSet = $rowSet;
        return $this;
    }

    /**
     * Функция инициализации колонок
     * @return void
     */
    public function init()
    {
    }
}

